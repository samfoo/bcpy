#####
#
# BCP algo for calculating podium
# RE notes:
# - Seems like "overall" is hardcoded to "false" in the events I've looked
#   at. Maybe this is something I just haven't looked at the right things
#   yet? There's a hidden UI element that can turn it on, but hell if I
#   know what it is.
# - pod == "podium"?
# - metrics lets individual event owners set their scoring or something?
#
#####
#
# function sortedPlayersArray(players, metrics, overall) {
#     var temp = players.slice();
#     temp.sort(function (a, b) {
#         if (overall) {
#             if (a.overallBattlePoints > b.overallBattlePoints) {
#                 return -1;
#             }
#             if (a.overallBattlePoints < b.overallBattlePoints) {
#                 return 1;
#             }
#             if (a.FFGBattlePointsSoS > b.FFGBattlePointsSoS) {
#                 return -1;
#             }
#             if (a.FFGBattlePointsSoS < b.FFGBattlePointsSoS) {
#                 return 1;
#             }
#         } else {
#             if (a.podNum && !b.podNum)
#                 return -1;
#             if (!a.podNum && b.podNum)
#                 return 1;
#             if (a.podNum < b.podNum)
#                 return -1
#             if (a.podNum > b.podNum)
#                 return 1;
#             for (var i = 0; i < metrics.length; i++) {
#                 if (metrics[i].isOn) {
#                     if (metrics[i].negative) {
#                         if (a['pod_'+metrics[i].key] < b['pod_'+metrics[i].key]) {
#                             return -1
#                         }
#                         if (a['pod_'+metrics[i].key] > b['pod_'+metrics[i].key]) {
#                             return 1
#                         }
#                     } else {
#                         if (a['pod_'+metrics[i].key] > b['pod_'+metrics[i].key]) {
#                             return -1
#                         }
#                         if (a['pod_'+metrics[i].key] < b['pod_'+metrics[i].key]) {
#                             return 1
#                         }
#                     }
#                     if (!a.podNum && !b.podNum) {
#                     if (metrics[i].negative) {
#                         if (a[metrics[i].key] < b[metrics[i].key]) {
#                             return -1
#                         }
#                         if (a[metrics[i].key] > b[metrics[i].key]) {
#                             return 1
#                         }
#                     } else {
#                         if (a[metrics[i].key] > b[metrics[i].key]) {
#                             return -1
#                         }
#                         if (a[metrics[i].key] < b[metrics[i].key]) {
#                             return 1
#                         }
#                     }
#                     }
#                 }
#             }
#         }
#         if (a.bracket_seed && !b.bracket_seed)
#             return -1;
#         if (!a.bracket_seed && b.bracket_seed)
#             return 1;
#         if (a.bracket_seed < b.bracket_seed)
#             return -1;
#         if (a.bracket_seed > b.bracket_seed)
#             return 1;
#         return 0;
#     });
#     return temp;
# }

